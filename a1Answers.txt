# SOFTENG 370 - assignment 1
# Xuzong Chen - id:64771321 - upi:xche985

# I wrote explanations in the form of comments, and copied the code verbatim.
# You might as well turn Python syntax highlighting on when reading this.


def exec_one_command(command):
    '''Takes a non-empty list as the argument.
    Calling this function will cause the current program to be dumped out of the current process!'''

    try:
        if not command or not command[0]:
            raise PSHProgrammerError("Empty command passed to exec_one_command.")
        if command.count('&') > 1:
            raise PSHUserError("Sorry, the programmer didn't know what to do with multiple ampersands in one command.")
        command = [token for token in command if token != '&']  # get rid of the '&'s from the command - we've already consdiered it in `main`.

        if '|' in command:
            # Split the one command into two commands.
            # The second command will be the consumer, who consumes the output produced
            # by the "previous commands", which is the producer.
            prev_commands, last_command = split_on_last_pipe(command)

            # Create a pipe, and make a note of the file descriptors.
            # `pipein` is analogous to `stdin`, which will be read from by the consumer.
            # `pipeout` is analogous to `stdout`. which will be wrote to, by the producer.
            pipein, pipeout = os.pipe()  

            # Notice that we created a pipe *before* we forked.
            # That way, the two processes will have access to *the same* pipe.
            pid = os.fork()
            if not pid:  # This is the child, which is all the "previous commands". It is the producer.
                # If the consumer dies before this producer finishes producing output,
                # we would get a "broken pipe" problem. To solve this,
                # we "wrap" the producer around another process which listens
                # to, and handles, the SIGPIPE signal sent by the OS when the (or all)
                # process at the other end of the pipe we're holding have terminated.

                def sigpipe_callback(sig, frame):
                    pass  # just defining a function.
                signal.signal(signal.SIGPIPE, sigpipe_callback)  # registering a listener
                producer_pid = os.fork()  # Create the "wrapping" process
                if not producer_pid:  # the actual producer
                    # Plug the writable end of the pipe into where stdout used to be.
                    # This is done by overwriting the stdout file descriptor with the 
                    # writable end of the pipe.
                    os.dup2(pipeout, sys.stdout.fileno())

                    # We don't need more file descriptors pointing to the pipe,
                    # and it's a better idea to start the command in a clean state.
                    os.close(pipein)
                    os.close(pipeout)

                    # Recursive call that deals with the remaining pipes.
                    exec_one_command(prev_commands) # Being an `exec`, this function call doesn't return.
                else:  # the proucer wrapper
                    try:
                        os.waitpid(producer_pid, 0)
                    except InterruptedError as ie:
                        # This happens when SIGPIPE is caught.
                        # It means that the consumer has gone.
                        # We'll tell the producer to terminate too.
                        os.kill(producer_pid, signal.SIGTERM)
            else:  # This is the parent, which is last command of the pipeline. It is the consumer.
                # Plug the readable end of the pipe into the stdin port of our process
                os.dup2(pipein, sys.stdin.fileno())

                # Let go of the extra handles onto the pipe
                os.close(pipein)
                os.close(pipeout)

                # Finally, execute the last command in the pipeline.
                exec_one_command(last_command)
                # As before, this `exec` call doesn't return.
        elif not run_builtin(command):
            # `run_builtin` is one of my custom functions, which attempts to run the
            # command as a builtin, and returns `True` if it did indeed run successfully.

            # If control reaches here, it means that the command to be executed is not a builtin.
            # Hence we treat it as an external.
            try:
                # Run the external command using the PATH environment variable with which the user started this shell.
                os.execvp(command[0], command)
            except FileNotFoundError as e:  # Obviously, the "external command" might just be gibberish.
                raise PSHUserError("Bad command or file name.")
    except PSHUserError as e:
        print(e)
    except Exception as e:  # We must not allow any exceptions to be thrown back to the caller of this function, otherwise we'll end up having more processes running than we expect.
        traceback.print_exc()  # prints stack trace, which is what'll usually be done if an exception isn't caught.
    finally:
        # To complete the recursive process, this exit of the 
        # function also needs to "dump the entire process away" and
        # "not return" too, as its docstring says.
        suicide()

'''\
Question 2:

Typing `cd ..` followed by `pwd` will obviously by all means show you the directory above where the shell was started.

Due to the way pipelines work, the individual commands in the pipeline each gets run in a new, seperate process. The built-in commands are no different from external commands in this regard.

The new process in which `cd` gets run holds the program of our shell (which is why the `cd` command is still able to run at all). The `cd` command will indeed change the working directory of the new instance of our shell in that new process, but as soon as the `cd` command finishes, its process will terminate. "Changing working directory" in the new process does not have any effect on the working directory of the original copy of our shell which started the pipeline.
'''